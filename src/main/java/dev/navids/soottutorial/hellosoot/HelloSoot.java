/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.navids.soottutorial.hellosoot;

import soot.*;
import soot.jimple.JimpleBody;
import soot.jimple.internal.JIfStmt;
import soot.options.Options;
import soot.toolkits.graph.ClassicCompleteUnitGraph;
import soot.toolkits.graph.UnitGraph;
import soot.jimple.AssignStmt;
import soot.jimple.BinopExpr;

import java.io.*;

public class HelloSoot {

    public static String sourceDirectory = System.getProperty("user.dir") + File.separator + "demo" + File.separator + "HelloSoot";
    public static String clsName = "FizzBuzz";
    public static String methodName = "printFizzBuzz";

    public static void setupSoot() {
        try {
            ProcessBuilder builder = new ProcessBuilder("powershell.exe", "demo\\compile.ps1");
            builder.redirectErrorStream(true);
            Process p = builder.start();
            p.getOutputStream().close();
            String line;
            BufferedReader stdout = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((line = stdout.readLine()) != null) {
                System.out.println(line);
            }
            stdout.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        G.reset();
        Options.v().set_prepend_classpath(true);
        Options.v().set_allow_phantom_refs(true);
        Options.v().set_soot_classpath(sourceDirectory);
        SootClass sc = Scene.v().loadClassAndSupport(clsName);
        sc.setApplicationClass();
        Scene.v().loadNecessaryClasses();

    }

    public static void main(String[] args) {
        setupSoot();

        // Retrieve printFizzBuzz's body
        SootClass mainClass = Scene.v().getSootClass(clsName);
        SootMethod sm = mainClass.getMethodByName(methodName);
        JimpleBody body = (JimpleBody) sm.retrieveActiveBody();

        // Print some information about printFizzBuzz
        System.out.println("Method Signature: " + sm.getSignature());
        System.out.println("--------------");
        System.out.println("Argument(s):");
        for (Local l : body.getParameterLocals()) {
            System.out.println(l.getName() + " : " + l.getType());
        }
        System.out.println("--------------");
        System.out.println("This: " + body.getThisLocal());
        System.out.println("--------------");
        System.out.println("Units:");
        int c = 1;
        UnitGraph ug = new ClassicCompleteUnitGraph(body);
        for (Unit u : body.getUnits()) {
            System.out.println("(" + c + ") " + u.toString());
            // also print the predecessors of the unit
            System.out.println("    Preds: " + ug.getPredsOf(u));
            // if the unit is an assignment statement, print the left and right operands
            if (u instanceof AssignStmt) {
                AssignStmt assignStmt = (AssignStmt) u;
                System.out.println("    Assigning to: " + assignStmt.getLeftOp());
                Value rhs = assignStmt.getRightOp();
                System.out.println("    Evaluating: " + rhs);
                // if the right-hand side is a binary operation, print the operands
                if (rhs instanceof BinopExpr) {
                    BinopExpr binop = (BinopExpr) rhs;
                    System.out.println("    Operand 1: " + binop.getOp1());
                    System.out.println("    Operand 2: " + binop.getOp2());
                }
            }
            c++;
        }
        System.out.println("--------------");

        // Print statements that have branch conditions
        System.out.println("Branch Statements:");
        for (Unit u : body.getUnits()) {
            if (u instanceof JIfStmt)
                System.out.println(u.toString());
        }

        // Draw the control-flow graph of the method if 'draw' is provided in arguments
    }
}
